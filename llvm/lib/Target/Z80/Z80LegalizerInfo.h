//===- Z80LegalizerInfo.h ----------------------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file declares the targeting of the Machinelegalizer class for Z80.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_Z80_Z80MACHINELEGALIZER_H
#define LLVM_LIB_TARGET_Z80_Z80MACHINELEGALIZER_H

#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"

namespace llvm {

class Z80Subtarget;
class Z80TargetMachine;

/// This class provides the information for the target register banks.
class Z80LegalizerInfo : public LegalizerInfo {
private:
  /// Keep a reference to the Z80Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const Z80Subtarget &Subtarget;
  const Z80TargetMachine &TM;

public:
  Z80LegalizerInfo(const Z80Subtarget &STI, const Z80TargetMachine &TM);

  LegalizerHelper::LegalizeResult
  legalizeCustom(MachineInstr &MI, MachineRegisterInfo &MRI,
                 MachineIRBuilder &MIRBuilder, GISelChangeObserver &Observer,
                 LegalizerHelper &Helper) const override;

  bool legalizeIntrinsic(MachineInstr &MI, MachineRegisterInfo &MRI,
                         MachineIRBuilder &MIRBuilder) const override;

private:
  LegalizerHelper::LegalizeResult
  legalizeFConstant(MachineInstr &MI, MachineRegisterInfo &MRI,
                    MachineIRBuilder &MIRBuilder,
                    GISelChangeObserver &Observer) const;
  LegalizerHelper::LegalizeResult
  legalizeCompare(MachineInstr &MI, MachineRegisterInfo &MRI,
                  MachineIRBuilder &MIRBuilder) const;
  LegalizerHelper::LegalizeResult
  legalizeBitwise(MachineInstr &MI, MachineRegisterInfo &MRI,
                  LegalizerHelper &Helper) const;
  LegalizerHelper::LegalizeResult
  legalizeVAStart(MachineInstr &MI, MachineRegisterInfo &MRI,
                  MachineIRBuilder &MIRBuilder) const;
};

} // End namespace llvm

#endif
